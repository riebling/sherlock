import django
import logging
import sys
from tkinter import *

import scrapy
from scrapy.crawler import CrawlerProcess

print ("WHY WHY WHY")
print (django.get_version())
print (scrapy.__file__)
#sys.exit()
print ("DIDN'T EXIT")

logging.getLogger('myScrapy').setLevel(logging.WARNING)

# Tk stuff: Python native GUI
def callback_blog():
    process.crawl(BlogSpider)
    process.start(True)

 
def callback_quotes():
    process.crawl(QuotesSpider)
    process.start(True)
 
def callback_quit():
    print("quit button pressed")
    sys.exit()

root = Tk()
root.wm_title("Scrapy Demo")
#b2 = Button(root, text="Scrape Quotes", command=callback_quotes)
#b2.pack()
urls = {"http://speechkitchen.org/category/whats-cooking", "http://quotes.toscrape.com/tag/humor/"}

chosenUrl = StringVar(root)
e = OptionMenu(root, chosenUrl, urls)
#e.pack(side=LEFT)

b = Button(root, text="Scrape", command=callback_blog)
#b.pack(side=LEFT)

b3 = Button(root, text="Quit", command=callback_quit)
#b3.pack()

tex = Text()
tex.pack(side=BOTTOM)



class BlogSpider(scrapy.Spider):
    name = 'blogspider'
    start_urls = [e.get()]
                  
 
    def parse(self, response):
        for title in response.css('h1.entry-title'):
            print (title.css('a ::text').extract_first())
            tex.insert(END, title.css('a ::text').extract_first())
            tex.see(END)
            yield {'title': title.css('a ::text').extract_first()}
 
        for quote in response.css('div.quote'):
            print (quote.css('span.text::text').extract_first())
            print (quote.xpath('span/small/text()').extract_first())
            tex.insert(END, quote.css('span.text::text').extract_first() + "\n")
            tex.insert(END, quote.xpath('span/small/text()').extract_first() + "\n\n")
            tex.see(END)
            
            yield {
                'text': quote.css('span.text::text').extract_first(),
                'author': quote.xpath('span/small/text()').extract_first(),
                }
 
        #next_page = response.css('div.prev-post > a ::attr(href)').extract_first()
        #if next_page:
        #    yield myScrapy.Request(response.urljoin(next_page), callback=self.parse)
 
class QuotesSpider(scrapy.Spider):
    name = "quotes"
    start_urls = [
        'http://quotes.toscrape.com/tag/humor/',
        ]
 
    def parse(self, response):
        for quote in response.css('div.quote'):
            print (quote.css('span.text::text').extract_first())
            print (quote.xpath('span/small/text()').extract_first())
            yield {
                'text': quote.css('span.text::text').extract_first(),
                'author': quote.xpath('span/small/text()').extract_first(),
                }
 
            next_page = response.css('li.next a::attr("href")').extract_first()
            if next_page is not None:
                next_page = response.urljoin(next_page)
                yield scrapy.Request(next_page, callback=self.parse)
 
process = CrawlerProcess({
    'USER_AGENT': 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)'
})
 

 
logging.getLogger('myScrapy').setLevel(logging.WARNING)
 

mainloop()
#root.mainloop()
